#!/usr/bin/python
# Takes in the file of strace records from a malware and produces 1,2,3 grams dataset of system calls
# Usage python sys_ngrams_single_out.py /path file will save

import sys
import os
from itertools import permutations

def one_gram_no_zero(path,virus_name): 
    all_dics = {}
    reading = 0
    strace_read = 0
    with open('strace_output') as f:
        lines = f.readlines()
        for line in lines:
            if reading == 0:
                if '###########################' in line:
                    new_dic = {}
                    reading = 1
                    continue
            if reading == 1:
                if virus_name in line and 'exec' not in line and "proc" not in line:
                    line = line.split('/')

                    strace_read = 1
                    continue
                if '###################' in line:
                    name = virus_name
                    reading = 0
                    strace_read = 0
                    all_dics[name] = new_dic
            if strace_read == 1:
                line = line.split('(')
                if 'strace: ' not in line[0] and line[0][0].isalpha():
                    if line[0] not in new_dic.keys():
                        new_dic[line[0]] = 0
                    new_dic[line[0]] += 1
    ngram_write("one_gram",path,virus_name,new_dic)

def one_gram(path,virus_name,maindict):
    all_dics = {}
    reading = 0
    strace_read = 0
    with open('strace_output') as f:
        lines = f.readlines()
        for line in lines:
            if reading == 0:
                if '###########################' in line:
                    new_dic = maindict
                    reading = 1
                    continue
            if reading == 1:
                if virus_name in line and 'exec' not in line and "proc" not in line:
                    line = line.split('/')
                    # name = line[3].strip()
                    strace_read = 1
                    continue
                if '###################' in line:
                    name = virus_name
                    reading = 0
                    strace_read = 0
                    all_dics[name] = new_dic
            if strace_read == 1:
                line = line.split('(')
                if 'strace: ' not in line[0] and line[0][0].isalpha():
                    if line[0] not in new_dic.keys():
                        new_dic[line[0]] = 0
                    new_dic[line[0]] += 1
    ngram_write("one_gram_all",path,virus_name,new_dic)


def two_gram_no_zero(path,virus_name): 
    all_dics = {}
    reading = 0
    strace_read = 0
    d = {}
    current = None
    prev = None

    with open('strace_output') as f:
        lines = f.readlines()
        for line in lines:
            if reading == 0:
                if '###########################' in line:
                    new_dic = {}
                    reading = 1
                    continue
            if reading == 1:
                if virus_name in line and 'exec' not in line and "proc" not in line:
                    line = line.split('/')
                    # name = line[3].strip()
                    strace_read = 1
                    continue
                if '###################' in line:
                    name = virus_name
                    reading = 0
                    strace_read = 0
                    all_dics[name] = new_dic
            if strace_read == 1:
                line = line.split('(')
                if 'strace: ' not in line[0] and line[0][0].isalpha():
                    prev = current
                    current = line[0]
                    if prev != None and current != None:
                        two_gram = (prev,current)
                        if two_gram not in new_dic.keys():
                            new_dic[two_gram] = 0
                        new_dic[ two_gram ] += 1
    
    ngram_write("two_gram",path,virus_name,new_dic)

def two_gram(path, virus_name,maindict):
    all_dics = {}
    reading = 0
    strace_read = 0
    d = {}
    current = None
    prev = None

    with open('strace_output') as f:
        lines = f.readlines()
        for line in lines:
            if reading == 0:
                if '###########################' in line:
                    new_dic = maindict
                    reading = 1
                    continue
            if reading == 1:
                if virus_name in line and 'exec' not in line and "proc" not in line:
                    line = line.split('/')
                    # name = line[3].strip()
                    strace_read = 1
                    continue
                if '###################' in line:
                    name = virus_name
                    reading = 0
                    strace_read = 0
                    #all_dics[name] = new_dic
            if strace_read == 1:
                line = line.split('(')
                if 'strace: ' not in line[0] and line[0][0].isalpha():
                    prev = current
                    current = line[0]
                    if prev != None and current != None:
                        two_gram = (prev, current)
                        if two_gram not in new_dic.keys():
                            new_dic[two_gram] = 0
                        new_dic[two_gram] += 1

    ngram_write("two_gram_all", path, virus_name, new_dic)

def three_gram_no_zero(path,virus_name):
    all_dics = {}
    reading = 0
    strace_read = 0
    d = {}
    current = None
    prev_1 = None
    prev_2 = None

    with open('strace_output') as f:
        lines = f.readlines()
        for line in lines:
            if reading == 0:
                if '###########################' in line:
                    new_dic = {}
                    reading = 1
                    continue
            if reading == 1:
                if virus_name in line and 'exec' not in line and "proc" not in line:
                    line = line.split('/')
                    # name = line[3].strip()
                    strace_read = 1
                    continue
                if '###################' in line:
                    name = virus_name
                    reading = 0
                    strace_read = 0
                    all_dics[name] = new_dic
            if strace_read == 1:
                line = line.split('(')
                if 'strace: ' not in line[0] and line[0][0].isalpha():
                    prev_2 = prev_1
                    prev_1 = current
                    current = line[0]
                    if current != None and prev_2 != None and prev_1 != None:
                        three_gram = (prev_2,prev_1, current)
                        if three_gram not in new_dic.keys():
                            new_dic[three_gram] = 0
                        new_dic[ three_gram ] += 1
    ngram_write("three_gram",path,virus_name,new_dic)

def three_gram(path,virus_name,maindict):
    all_dics = {}
    reading = 0
    strace_read = 0
    d = {}
    current = None
    prev_1 = None
    prev_2 = None

    with open('strace_output') as f:
        lines = f.readlines()
        for line in lines:
            if reading == 0:
                if '###########################' in line:
                    new_dic = maindict
                    reading = 1
                    continue
            if reading == 1:
                if virus_name in line and 'exec' not in line and "proc" not in line:
                    line = line.split('/')
                    # name = line[3].strip()
                    strace_read = 1
                    continue
                if '###################' in line:
                    name = virus_name
                    reading = 0
                    strace_read = 0
                    all_dics[name] = new_dic
            if strace_read == 1:
                line = line.split('(')
                if 'strace: ' not in line[0] and line[0][0].isalpha():
                    prev_2 = prev_1
                    prev_1 = current
                    current = line[0]
                    if current != None and prev_2 != None and prev_1 != None:
                        three_gram = (prev_2,prev_1, current)
                        if three_gram not in new_dic.keys():
                            new_dic[three_gram] = 0
                        new_dic[ three_gram ] += 1
    ngram_write("three_gram_all",path,virus_name,new_dic)

def ngram_write(fname, directory,virus_name, data):
    if os.path.isdir(directory):
        f = open(fname,"w+")
        f.write(virus_name+"\n")
        if "one" in fname:
            for key,value in data.items():
                f.write(key + ","+str(value) + "\n")
        elif "two" in fname:
            for key_2, value_2 in data.items():
                f.write(key_2[0] + "," + key_2[1] + "," + str(value_2) + "\n")
        elif "three" in fname:
            for key_2, value_2 in data.items():
                f.write(key_2[0] + "," + key_2[1]  + "," + key_2[2] + "," + str(value_2) + "\n")
        f.close()
        

def main():
    if len(sys.argv) != 2:
        print("usage: python sys_ngrams_single_out.py /Path containing stace_output/ virus_name")
        exit()
    #malware_folders = ["../malware_dynamic-static/", "../malware_static/"]

    malware_folders = sys.argv[1]
    mflist = malware_folders.split("/")
    path = "/".join(mflist[:-1]) +"/"
    virus_name = sys.argv[2]
    #array containing all system calls
    syscalls = ['_llseek', 'execv', 'alloc_hugepages', 'umount', 'fanotify_mark', 'bind', 'sys_debug_setcontext',
                'process_vm_readv', 'keyctl', 'clone', 'sendto', 'brk', 'statx', 'semop', 'spu_run', 'statfs',
                'process_vm_writev', 'create_module', 'sched_setattr', 'waitpid', 'iopl', 'membarrier', 'execveat',
                'remap_file_pages', 'io_destroy', 'modify_ldt', 'eventfd', 'query_module', 'rseq', 'recvmsg', 'dup',
                'setresuid3', 'getpgid', 'getpeername', 'sigaltstack', 'subpage_prot', 'removexattr', 'vm86old',
                'ftruncate', 'reboot', 'timer_settime', 'ustat', 'seccomp', 'fstatfs64', 'setresuid', 'setresgid3',
                'rt_tgsigqueueinfo', 'sync_file_range', 'utime', 'readdir', 'fcntl64', 'vmsplice', 'getuid', 'set_tls',
                'request_key', 'sram_free', 'times', 'setsockopt', 'set_robust_list', 'writev',
                'sched_get_priority_max', 'setgroups', 'getresuid', 'rt_sigpending', 'sigreturn', 'symlinkat', 'kcmp',
                'pwritev', 'fstatfs', 'restart_syscall', 'unlink', 'listen', 'ssetmask', 'madvise', 'utimes',
                '_newselect', 'setreuid', 'ftruncate64', 'clock_gettime', 'umask', 'newfstatat', 'perf_event_open',
                'copy_file_range', 'uname', 'mlock', 'mq_unlink', 'munlockall', 'renameat', 'sched_getparam', 'preadv',
                'chown3', 'quotactl', 'msgsnd', 'socket', 'get_mempolicy', 'setpgid', 'sigaction', 'pkey_mprotect',
                'dup3', 'ioprio_get', 'preadv', 'ptrace', 'old_getrlimit', 'sethae', 'swapon', 'rmdir', 'spill',
                'linkat', 'setfsgid', 'kexec_file_load', 'getpid', 'ipc', 'getcpu', 'epoll_create1', 'stime',
                'rt_sigreturn', 'sram_alloc', 'io_cancel', 'rtas', 'nfsservctl', 'unshare', 'fallocate', 'sched_yield',
                'poll', '.6.13', 'setxattr', 'setup', 'fadvise64_64', 'adjtimex', 'msgrcv', 'mlock', 'oldolduname',
                'lremovexattr', 'shmdt', 'timerfd_gettime', 'recvfrom', 'atomic_barrier', 'fadvise64', 'mkdir',
                'getrlimit', 'faccessat', 's390_sthyi', 'wait4', 'clone', 'openat', 'open', 'lstat64',
                'sched_setscheduler', 'get_tls', 'add_key', 'fchmod', 'perfmonctl', 'mlockall', 'lseek', 'mknod',
                'syslog', 'switch_endian', 'free_hugepages', 'mremap', 'clock_nanosleep', 'mincore', 'getpagesize',
                'socketpair', 'fanotify_init', 'name_to_handle_at', 'usr26', 'getresgid3', 'olduname', 'lsetxattr',
                'acct', 'bpf', 'setreuid3', 'epoll_pwait', 'flistxattr', 'waitid', 'oldfstat', 'munlock', 'shmget',
                'io_pgetevents', 'old_adjtimex', 'timer_getoverrun', 'readahead', 'bfin_spinlock', 'setns', '_sysctl',
                'set_thread_area', 'getresgid', 'metag_get_tls', 'stat', 'sigpending', 'sched_setparam',
                'arc_usr_cmpxchg', 'fstatat64', 'getsockopt', 'accept4', 'getegid3', '1', 'getsockname',
                'atomic_cmpxchg_3', 'mq_notify', 'fchownat', 'pread64', 'clock_adjtime', 'setfsuid3', 'nanosleep',
                'breakpoint', 'msgget', 'init_module', 'get_robust_list', 'mknodat', 'recv', 'io_submit',
                'cmpxchg_badaddr', 'sendfile64', 'inotify_init', 'rt_sigtimedwait', 'futex', 'getdents64',
                'inotify_init1', 'nice', 'mq_getsetattr', 'shmctl', 'stat64', 'geteuid3', 'renameat', 'fsetxattr',
                'io_getevents', 'getitimer', 'pivot_root', 'ioperm', 'capget', 'tee', 'fremovexattr', 'timer_delete',
                'metag_setglobalbit', 'cacheflush', 'mbind', 'fchown3', 'splice', 'sysmips', 'socketcall', 'prlimit64',
                'arc_settls', 'pread', 'fork', 'settimeofday', 'getxattr', 'ugetrlimit', 'ioctl', 'finit_module',
                'timer_create', 'getgroups', 'sendmsg', 'select', 'sched_set_affinity', 'listxattr', 'oldstat',
                'sigprocmask', 'mq_open', 'setdomainname', 'tkill', 'sigsuspend', 'arc_gettls', 'signal',
                'riscv_flush_icache', 'accept', 'memory_ordering', 'semtimedop', 'clock_settime', 'setrlimit',
                'pselect6', 'lgetxattr', 'setgid', 'getgid', 'ppoll', 's390_guarded_storage', 'sched_getscheduler',
                'fchmodat', 'exit_group', 'utimensat', 'setgroups3', 'shutdown', 'metag_set_fpu_flags', 'shmat',
                'epoll_wait', 'futimesat', 'getgid3', 'setfsuid', 'userfaultfd', 'pkey_alloc', 'sched_getattr', 'time',
                'chdir', 'inotify_add_watch', 'getxuid', 'dup', 'setfsgid3', 'msync', 'lchown3', 'getdtablesize',
                'fsync', 'fcntl', 'semget', 'link', 'vfork', 'sched_rr_get_interval', 'sendfile', 'pwrite64',
                'epoll_create', 'pciconfig_iobase', 'rt_sigaction', 'truncate64', 'connect', 'pciconfig_read',
                'rt_sigsuspend', 'setsid', 'xtensa', 'sched_setaffinity', 'alarm', 'eventfd', 'getrandom',
                'get_kernel_syms', 'getrusage', 'syscall', 'getsid', 'kexec_load', 'oldlstat', 'swapcontext', 'setpgrp',
                'lchown', 'fchdir', 'or1k_atomic', 'getresuid3', 'pwrite', 'fchown', 'setitimer', 'sysinfo',
                'inotify_rm_watch', 'personality', 'msgctl', 'setpriority', 'mount', 'sync_file_range', 'getpgrp',
                's390_runtime_instr', 'lookup_dcookie', 'get_thread_area', 'pwritev', 'arch_prctl', 'exit',
                'utrap_install', 'creat', 'kern_features', 'rename', 'move_pages', 'mq_timedsend', 'kill',
                'open_by_handle_at', 'mkdirat', 'dma_memcpy', 'pkey_free', 'sched_get_affinity', 'signalfd', 'prctl',
                'metag_set_tls', 'readv', 'chown', 'access', 'flock', 'read', 'readlink', 'sethostname', 'setuid',
                'syncfs', 'delete_module', 'send', 'pciconfig_write', 'gettid', 'getcwd', 'oldumount', 'getppid',
                'uselib', 'sysfs', 'migrate_pages', 'memfd_create', 'vhangup', 'sync', 'sched_get_priority_min',
                'close', 'statfs64', 'getuid3', 'llistxattr', 'getpriority', 'fdatasync', 'sched_getaffinity', 'chmod',
                'timerfd_settime', 'getegid', 'write', 'getxpid', 'signalfd4', 'io_setup', 'fstat64', 'epoll_ctl',
                'lstat', 'setresgid', 'chroot', 'execve', 'ioprio_set', 'geteuid', 'clock_getres', 'mq_timedreceive',
                'pipe', 'setgid3', 'gethostname', 'getunwind', 'getdomainname', 'spu_create', 'munmap', 'getdents',
                'mprotect', 'unlinkat', 'tgkill', 'pause', 'rt_sigqueueinfo', 'sgetmask', 'set_tid_address',
                'set_mempolicy', 'pipe', 'perfctr', 'symlink', 'umount', 'fgetxattr', 'capset', 'fstat', 'getxgid',
                'rt_sigprocmask', 'semctl', 'gettimeofday', 'setuid3', 'swapoff', 'timerfd_create', 'timer_gettime',
                'vm86', 'bdflush', 'getgroups3', 'truncate', 'readlinkat']

    maindict_1gram = {}
    for i in syscalls:
        maindict_1gram[i] = 0


    perm = permutations(syscalls, 2)
    maindict_2gram = {}
    # init main dict
    for i in perm:
        maindict_2gram[i] = 0





    print("Path: " + path)
    print("Virus name: "+ virus_name)
    one_gram_no_zero(path,virus_name)
    one_gram(path,virus_name,maindict_1gram)

    two_gram_no_zero(path,virus_name)
    two_gram(path, virus_name,maindict_2gram)

    three_gram_no_zero(path,virus_name)

    # UNCOMMENT TO PRODUCE 3GRAMS WITH ZEROES
    # perm = permutations(syscalls,3)
    # maindict_3gram = {}
    #
    # for i in perm:
    #     maindict_3gram[i] = 0
    # three_gram(path,virus_name,maindict_3gram)


if __name__ == "__main__":
    main()
